name: i4-server

services:
  collector:
    build: ./collector
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
    ports:
      - "12001:12001"
    networks:
      - back-tier
  
  kafka:
    image: apache/kafka:3.8.0
    env_file: ./kafka/config.env
    healthcheck:
      test: kafka-topics.sh --bootstrap-server kafka:9092 --topic uploads --describe
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "9092:9092"
    expose:
      - "9092"
    networks:
      - back-tier
  
  init-kafka:
    image: apache/kafka:3.8.0
    depends_on:
      - kafka
    env_file: ./kafka-init/config.env
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic uploads --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
    networks:
      - back-tier

  mongo:
    image: mongo:7.0.2
    environment:
      MONGO_INITDB_USERNAME: "admin"
      MONGO_INITDB_PASSWORD: "admin"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "27017:27017"
    volumes:
      #- /Users/andnic/Documents/mongo-data-i4:/etc/mongo-data
      - ./mongo/init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - back-tier
    #command: ["mongod", "--dbpath", "/etc/mongo-data"]

networks:
  back-tier: {}